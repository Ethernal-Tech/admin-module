// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: adminmodule/adminmodule.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TextProposal defines a standard text proposal whose changes need to be
// manually updated in case of approval.
type TextProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *TextProposal) Reset()      { *m = TextProposal{} }
func (*TextProposal) ProtoMessage() {}
func (*TextProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_587bdadc28f3d643, []int{0}
}
func (m *TextProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextProposal.Merge(m, src)
}
func (m *TextProposal) XXX_Size() int {
	return m.Size()
}
func (m *TextProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_TextProposal.DiscardUnknown(m)
}

var xxx_messageInfo_TextProposal proto.InternalMessageInfo

// Proposal defines the core field members of a governance proposal.
type Proposal struct {
	ProposalId uint64     `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"id" yaml:"id"`
	Content    *types.Any `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	SubmitTime time.Time  `protobuf:"bytes,3,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time" yaml:"submit_time"`
}

func (m *Proposal) Reset()      { *m = Proposal{} }
func (*Proposal) ProtoMessage() {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_587bdadc28f3d643, []int{1}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TextProposal)(nil), "cosmos.adminmodule.adminmodule.TextProposal")
	proto.RegisterType((*Proposal)(nil), "cosmos.adminmodule.adminmodule.Proposal")
}

func init() { proto.RegisterFile("adminmodule/adminmodule.proto", fileDescriptor_587bdadc28f3d643) }

var fileDescriptor_587bdadc28f3d643 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x3d, 0x8e, 0x9b, 0x40,
	0x14, 0x66, 0x1c, 0x27, 0x8e, 0x87, 0x48, 0x91, 0x88, 0x0b, 0xc7, 0x52, 0x06, 0x8b, 0x2a, 0x8d,
	0x41, 0x72, 0x52, 0x39, 0x55, 0x48, 0x95, 0x2e, 0x42, 0x96, 0x12, 0x25, 0x85, 0x05, 0xcc, 0x84,
	0x8c, 0xc4, 0x30, 0x08, 0x06, 0xc9, 0x74, 0x39, 0x82, 0x8f, 0x90, 0x43, 0xe4, 0x10, 0xd6, 0x56,
	0xd6, 0x56, 0xae, 0x58, 0x1b, 0x37, 0xab, 0x2d, 0x7d, 0x82, 0x15, 0x0c, 0xec, 0x22, 0x6f, 0xf7,
	0xcd, 0xfb, 0xde, 0xf7, 0xbd, 0x9f, 0x79, 0xf0, 0x9d, 0x8b, 0x19, 0x8d, 0x18, 0xc7, 0x59, 0x48,
	0xac, 0x0e, 0x36, 0xe3, 0x84, 0x0b, 0xae, 0x21, 0x9f, 0xa7, 0x8c, 0xa7, 0x66, 0x97, 0xe9, 0xe0,
	0xc9, 0x28, 0xe0, 0x01, 0xaf, 0x53, 0xad, 0x0a, 0x49, 0xd5, 0xe4, 0xad, 0x54, 0xad, 0x24, 0xd1,
	0x58, 0x48, 0x4a, 0x0f, 0x38, 0x0f, 0x42, 0x62, 0xd5, 0x2f, 0x2f, 0xfb, 0x6d, 0x09, 0xca, 0x48,
	0x2a, 0x5c, 0x16, 0xb7, 0xda, 0xcb, 0x04, 0x37, 0xca, 0x1b, 0x0a, 0x5d, 0x52, 0x38, 0x4b, 0x5c,
	0x41, 0x79, 0x24, 0x79, 0xe3, 0x3b, 0x7c, 0xb5, 0x24, 0x6b, 0xf1, 0x2d, 0xe1, 0x31, 0x4f, 0xdd,
	0x50, 0x1b, 0xc1, 0xe7, 0x82, 0x8a, 0x90, 0x8c, 0xc1, 0x14, 0xbc, 0x1f, 0x3a, 0xf2, 0xa1, 0x4d,
	0xa1, 0x8a, 0x49, 0xea, 0x27, 0x34, 0xae, 0xa4, 0xe3, 0x5e, 0xcd, 0x75, 0x43, 0x8b, 0xd7, 0xb7,
	0xff, 0x74, 0x70, 0xfd, 0x7f, 0x36, 0xf8, 0xc2, 0x23, 0x41, 0x22, 0x61, 0x1c, 0x00, 0x7c, 0xf9,
	0xe0, 0xfa, 0x11, 0xaa, 0x71, 0x83, 0x57, 0x14, 0xd7, 0xde, 0x7d, 0xfb, 0xcd, 0x5d, 0xa1, 0xf7,
	0x28, 0x3e, 0x17, 0xfa, 0x30, 0x77, 0x59, 0xb8, 0x30, 0x28, 0x36, 0x1c, 0xd8, 0xe6, 0x7d, 0xc5,
	0xda, 0x27, 0x38, 0xf0, 0xa5, 0x5b, 0x5d, 0x51, 0x9d, 0x8f, 0x4c, 0x39, 0x8d, 0xd9, 0x4e, 0x63,
	0x7e, 0x8e, 0x72, 0x5b, 0xbd, 0x7a, 0x2c, 0xeb, 0xb4, 0x0a, 0xed, 0x17, 0x54, 0xd3, 0xcc, 0x63,
	0x54, 0xac, 0xaa, 0x6d, 0x8d, 0x9f, 0xd5, 0x06, 0x93, 0x27, 0x06, 0xcb, 0x76, 0x95, 0x36, 0xda,
	0x16, 0xba, 0x72, 0x2e, 0x74, 0x4d, 0x36, 0xd3, 0x11, 0x1b, 0x9b, 0x1b, 0x1d, 0x38, 0x50, 0x46,
	0x2a, 0xc1, 0xa2, 0x5f, 0x4d, 0x6b, 0xff, 0xd8, 0x1e, 0x91, 0xb2, 0x3f, 0x22, 0xe5, 0x6f, 0x89,
	0x94, 0x6d, 0x89, 0xc0, 0xae, 0x44, 0xe0, 0x50, 0x22, 0xb0, 0x39, 0x21, 0x65, 0x77, 0x42, 0xca,
	0xfe, 0x84, 0x94, 0x9f, 0xf3, 0x80, 0x8a, 0x3f, 0x99, 0x67, 0xfa, 0x9c, 0x35, 0xdf, 0x2a, 0x6f,
	0x66, 0xd6, 0x1c, 0xd0, 0xba, 0x7b, 0x42, 0x96, 0xc8, 0x63, 0x92, 0x7a, 0x2f, 0xea, 0xfe, 0x3e,
	0xdc, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x59, 0x89, 0x1f, 0x6a, 0x02, 0x00, 0x00,
}

func (this *TextProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextProposal)
	if !ok {
		that2, ok := that.(TextProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Proposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Proposal)
	if !ok {
		that2, ok := that.(Proposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProposalId != that1.ProposalId {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if !this.SubmitTime.Equal(that1.SubmitTime) {
		return false
	}
	return true
}
func (m *TextProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAdminmodule(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAdminmodule(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmitTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAdminmodule(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminmodule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintAdminmodule(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdminmodule(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdminmodule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TextProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAdminmodule(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAdminmodule(uint64(l))
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovAdminmodule(uint64(m.ProposalId))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovAdminmodule(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime)
	n += 1 + l + sovAdminmodule(uint64(l))
	return n
}

func sovAdminmodule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdminmodule(x uint64) (n int) {
	return sovAdminmodule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TextProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminmodule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdminmodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdminmodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminmodule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdminmodule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminmodule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminmodule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminmodule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminmodule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdminmodule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdminmodule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdminmodule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminmodule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminmodule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdminmodule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdminmodule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdminmodule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdminmodule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdminmodule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdminmodule = fmt.Errorf("proto: unexpected end of group")
)
